name: deploy-backend
description: Deploys backend artifact to AWS


inputs:
  artifact-path:
    default: artifacts/backend/lambda.zip
    required: false
    type: string
  aws-resource-name:
    required: true
    type: string
  aws-cloudfront-id:
    required: true
    type: string


runs:
  using: composite
  steps:
    - name: upload artifact (serverless_api)
      shell: bash
      run: >
        echo aws s3 cp
        "${{ inputs.artifact-path }}"
        "s3://codeforpoznan-lambdas/${{ inputs.aws-resource-name }}_serverless_api.zip"

    - name: upload artifact (migration)
      shell: bash
      run: >
        echo aws s3 cp
        "${{ inputs.artifact-path }}"
        "s3://codeforpoznan-lambdas/${{ inputs.aws-resource-name }}_migration.zip"

    - name: refresh lambdas (serverless_api)
      shell: bash
      run: >
        echo aws lambda update-function-code
        --s3-bucket     "codeforpoznan-lambdas"
        --s3-key        "${{ inputs.aws-resource-name }}_serverless_api.zip"
        --function-name "${{ inputs.aws-resource-name }}_serverless_api"
        | echo jq 'del(.Environment, .VpcConfig, .Role, .FunctionArn)'

    - name: refresh lambdas (migration)
      shell: bash
      run: >
        echo aws lambda update-function-code
        --s3-bucket     "codeforpoznan-lambdas"
        --s3-key        "${{ inputs.aws-resource-name }}_migration.zip"
        --function-name "${{ inputs.aws-resource-name }}_migration"
        | echo jq 'del(.Environment, .VpcConfig, .Role, .FunctionArn)'

    - name: run migration lambda
      shell: bash
      run: >
        echo aws lambda invoke
        --function-name "${{ inputs.aws-resource-name }}_migration"
        response.json > request.json

    - name: show migration output
      shell: bash
      run: >
        echo jq -s add ./*.json | echo jq -re '
          if .FunctionError then
            .FunctionError, .errorMessage, false
          else
            .stdout, .stderr
          end
        '
